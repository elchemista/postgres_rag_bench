defmodule HybridSearch.Search.Bm25 do
  @moduledoc """
  Straightforward wrapper around PostgreSQL full-text search and BM25 ranking.
  """

  import Ecto.Query, warn: false

  alias HybridSearch.Datasets.DatasetChunk
  alias HybridSearch.Repo

  @default_limit 10

  @doc """
  Executes a BM25 ranked search against the stored chunks.

  Returns a list of maps with three keys:

    * `:chunk` – the matching `%DatasetChunk{}`
    * `:score` – the BM25 score returned by PostgreSQL
    * `:headline` – highlighted excerpt generated by `ts_headline/3`
  """
  @spec search(String.t(), keyword()) :: [
          %{chunk: DatasetChunk.t(), score: float(), headline: String.t()}
        ]
  def search(query, opts \\ []) do
    trimmed = query |> to_string() |> String.trim()
    limit = opts |> Keyword.get(:limit, @default_limit) |> normalize_limit()

    if trimmed == "" do
      []
    else
      run_query(trimmed, limit)
    end
  end

  defp run_query(query, limit) do
    DatasetChunk
    |> from(as: :chunk)
    |> where(
      [chunk: c],
      fragment(
        "to_tsvector('english', ?) @@ plainto_tsquery('english', ?)",
        c.content,
        ^query
      )
    )
    |> select([chunk: c], %{
      chunk: c,
      score:
        fragment(
          "ts_rank_cd(to_tsvector('english', ?), plainto_tsquery('english', ?))",
          c.content,
          ^query
        ),
      headline:
        fragment(
          "ts_headline('english', ?, plainto_tsquery('english', ?))",
          c.content,
          ^query
        )
    })
    |> order_by([chunk: c],
      desc:
        fragment(
          "ts_rank_cd(to_tsvector('english', ?), plainto_tsquery('english', ?))",
          c.content,
          ^query
        )
    )
    |> limit(^limit)
    |> Repo.all()
  end

  defp normalize_limit(limit) when is_integer(limit) and limit > 0, do: limit
  defp normalize_limit(_), do: @default_limit
end
